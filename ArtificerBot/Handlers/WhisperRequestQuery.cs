using Artificer.Utility;using Artificer.Utility.Keyboards;using Telegram.Bot;using Telegram.Bot.Types;using Telegram.Bot.Types.Enums;using Telegram.Bot.Types.ReplyMarkups;using File = System.IO.File;using TMessage = Telegram.Bot.Types.Message;namespace Artificer.Bot.Handlers;public static class WhisperRequestQuery{    public static async Task HandleAsync(ITelegramBotClient botClient, TMessage voice, CancellationToken cancellationToken)    {        var duration = voice.Voice!.Duration + 1;        var user = Kernel.Users.GetUserFromChatId(voice.From!.Id);                try        {            await botClient.SendChatActionAsync(user!.ID, ChatAction.Typing, cancellationToken);            if (Kernel.CheckBalance(user, out var errorMessage, out var errorKeyboard) == false)            {                if (user.Trial)                {                    var del = await botClient.SendTextMessageAsync(user.ID, "üí¨",                        replyMarkup: new ReplyKeyboardRemove(), cancellationToken: cancellationToken);                    await botClient.DeleteMessageAsync(new ChatId(user.ID), del.MessageId,                        cancellationToken: cancellationToken);                    var m = await botClient.SendTextMessageAsync(user.ID, errorMessage!,                        cancellationToken: cancellationToken);                    await botClient.EditMessageReplyMarkupAsync(user.ID, m.MessageId,                        replyMarkup: RegistrationKeyboard.GetKeyboard(m.MessageId),                        cancellationToken: cancellationToken);                }                else                {                    if(errorKeyboard != null)                        await botClient.SendTextMessageAsync(user.ID, errorMessage!, replyMarkup: errorKeyboard, cancellationToken: cancellationToken);                    else await botClient.SendTextMessageAsync(user.ID, errorMessage!, cancellationToken: cancellationToken);                }                Debug.Log($"[VOICERESPONS] [ERROR] {errorMessage}", user.ID);            }            else            {                await botClient.SendChatActionAsync(user.ID, ChatAction.Typing, cancellationToken);                                var tempPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "temp");                var filePath = Path.Combine(tempPath, voice.Voice!.FileId + ".oga");                var fileInfo = await botClient.GetFileAsync(voice.Voice.FileId, cancellationToken: cancellationToken);                await using (var stream = File.OpenWrite(filePath))                {                    await botClient.DownloadFileAsync(fileInfo.FilePath!, stream, cancellationToken: cancellationToken);                }                var mp3File = await Kernel.ConvertToMp3(filePath);                var returnetText = await Kernel.GetTranscriptionsResponse(user.ID, mp3File);                File.Delete(mp3File);                                await botClient.SendChatActionAsync(user.ID, ChatAction.Typing, cancellationToken);                                Debug.Log($"[VOICEREQUEST] [Duration: {duration}] {returnetText}", voice.From.Id);                var response = await Kernel.GetChatGPTResponse(user, returnetText);                var text = response.Content;                if (response.FinishReason == "error")                {                    await botClient.SendTextMessageAsync(user.ID, text, parseMode: ParseMode.Markdown, cancellationToken: cancellationToken);                    Debug.Log($"[VOICERESPONS] [ERROR] {text}", user.ID);                    return;                }                if (text.Length > 4096)                {                    var messages = Kernel.GetBrokenMessage(text);                    foreach (var me in messages)                    {                        await botClient.SendTextMessageAsync(user.ID, me, ParseMode.Markdown, replyToMessageId: voice.MessageId, cancellationToken: cancellationToken);                    }                }                else                {                    await botClient.SendTextMessageAsync(user.ID, text, ParseMode.Markdown, replyToMessageId: voice.MessageId, cancellationToken: cancellationToken);                }                                Kernel.UpdateRequestBalance(user);                Kernel.UpdateWhisperBalance(user, duration);                #pragma warning disable CS4014                Kernel.Database.AddWhisperRequest(user.ID, user.Organization, duration);                #pragma warning restore CS4014                Debug.Log($"[VOICERESPONS] {text}", user.ID);                if (response.FinishReason == "length")                {                    await botClient.SendTextMessageAsync(user.ID, Kernel.Messages.Get("length"),                        cancellationToken: cancellationToken);                    Debug.Log($"[VOICERESPONS] [LENGHT] {Kernel.Messages.Get("length")}", user.ID);                }                                //user.Stage = UserStage.Ready;            }                        await Kernel.Database.AddAction(user.ID, ActionType.WhisperRequestQuery);        }        catch (Exception e)        {            if (user != null)                await botClient.SendTextMessageAsync(user.ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",                    ParseMode.Markdown, cancellationToken: cancellationToken);            Debug.Log($"[WhisperRequestQuery] {e.Message}: {e.StackTrace}", Debug.Sender.Telegram,                Debug.MessageStatus.FAIL);        }    }}