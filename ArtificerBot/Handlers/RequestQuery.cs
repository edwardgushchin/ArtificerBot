using Artificer.Utility;using Artificer.Utility.Keyboards;using Telegram.Bot;using Telegram.Bot.Types;using Telegram.Bot.Types.Enums;using Telegram.Bot.Types.ReplyMarkups;namespace Artificer.Bot.Handlers;public static class RequestQuery{    public static async Task HandleAsync(ITelegramBotClient botClient, User user, string data, CancellationToken cancellationToken)    {        try        {            Debug.Log($"[REQUEST] {data}", user.ID);            await botClient.SendChatActionAsync(user.ID, ChatAction.Typing, cancellationToken);            if (Kernel.CheckBalance(user, out var errorMessage, out var errorKeyboard) == false)            {                if (user.Trial)                {                    var del = await botClient.SendTextMessageAsync(user.ID, "💬", replyMarkup: new ReplyKeyboardRemove(), cancellationToken: cancellationToken);                    await  botClient.DeleteMessageAsync(new ChatId(user.ID), del.MessageId, cancellationToken: cancellationToken);                    var m = await botClient.SendTextMessageAsync(user.ID, errorMessage!, cancellationToken: cancellationToken);                    await botClient.EditMessageReplyMarkupAsync(user.ID, m.MessageId, replyMarkup: RegistrationKeyboard.GetKeyboard(m.MessageId), cancellationToken: cancellationToken);                }                else                {                    if(errorKeyboard != null)                        await botClient.SendTextMessageAsync(user.ID, errorMessage!, replyMarkup: errorKeyboard, cancellationToken: cancellationToken);                    else await botClient.SendTextMessageAsync(user.ID, errorMessage!, cancellationToken: cancellationToken);                }                Debug.Log($"[RESPONS] [ERROR] {errorMessage}", user.ID);            }            else            {                var response = await Kernel.GetChatGPTResponse(user, data);                var text = response.Content;                if (response.FinishReason == "error")                {                    await botClient.SendTextMessageAsync(user.ID, text, ParseMode.Markdown, cancellationToken: cancellationToken);                    Debug.Log($"[RESPONS] [ERROR] {text}", user.ID);                    return;                }                            if (text.Length > 4096)                {                    var messages = Kernel.GetBrokenMessage(text);                    foreach (var me in messages)                    {                        await botClient.SendTextMessageAsync(user.ID, me,ParseMode.Markdown, cancellationToken: cancellationToken);                    }                }                else                {                    try                    {                        await botClient.SendTextMessageAsync(user.ID, text, ParseMode.Markdown, cancellationToken: cancellationToken);                    }                    catch (Exception e)                    {                        if (e.Message.StartsWith("Bad Request: can't parse entities: Can't find end of the entity"))                        {                            await botClient.SendTextMessageAsync(user.ID, text, cancellationToken: cancellationToken);                        }                    }                                    }                                Kernel.UpdateRequestBalance(user);                Debug.Log($"[RESPONS] {text}", user.ID);                if (response.FinishReason == "length")                {                    await botClient.SendTextMessageAsync(user.ID, Kernel.Messages.Get("length"), cancellationToken: cancellationToken);                    Debug.Log($"[RESPONS] [LENGHT] {Kernel.Messages.Get("length")}", user.ID);                }                user.Stage = UserStage.Ready;            }                        await Kernel.Database.AddAction(user.ID, ActionType.RequestQuery);        }        catch (Exception e)        {            await botClient.SendTextMessageAsync(user.ID, "❌ Произошла непредвиденная ошибка. Попробуйте еще раз.", ParseMode.Markdown, cancellationToken: cancellationToken);            Debug.Log($"[RequestQuery] {e.Message}: {e.InnerException} {e.StackTrace}", Debug.Sender.Telegram, Debug.MessageStatus.FAIL);        }    }}